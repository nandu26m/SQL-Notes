-- 1. Find duplicate records in a table based on multiple columns in 'your_table'

/*
SELECT column1, column2, COUNT(*)
FROM your_table
GROUP BY column1, column2
HAVING COUNT(*) > 1;
*/

-- 2. Retrieve the second highest salary from the Employee table

/*
SELECT MAX(salary) AS SecondHighestSalary
FROM Employee
WHERE salary < (SELECT MAX(salary) FROM Employee);
*/

-- 3. Find employees who are not assigned to any department using LEFT JOIN on Employee and Department

/*
SELECT e.*
FROM Employee e
LEFT JOIN Department d ON e.department_id = d.department_id
WHERE d.department_id IS NULL;
*/

-- 4. Calculate the total revenue for each product in the Sales table

/*
SELECT product_id, SUM(quantity * price) AS total_revenue
FROM Sales
GROUP BY product_id;
*/

-- 5. Get the top 3 highest-paid employees from the Employee table

/*
SELECT TOP 3 *
FROM Employee
ORDER BY salary DESC;
*/

-- 6. Find customers who made purchases (Orders) but never returned any products (Returns)

/*
SELECT DISTINCT c.customer_id
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
WHERE c.customer_id NOT IN (
    SELECT customer_id FROM Returns r
    JOIN Orders o ON r.order_id = o.order_id
);
*/

-- 7. Show the number of orders placed by each customer from the Orders table

/*
SELECT customer_id, COUNT(*) AS order_count
FROM Orders
GROUP BY customer_id;
*/

-- 8. Retrieve all employees who joined in the year 2023 from the Employee table

/*
SELECT *
FROM Employee
WHERE YEAR(hire_date) = 2023;
*/

-- 9. Calculate the average order value for each customer using Orders table

/*
SELECT customer_id, AVG(total_amount) AS avg_order_value
FROM Orders
GROUP BY customer_id;
*/

-- 10. Get the latest order date for each customer in Orders table

/*
SELECT customer_id, MAX(order_date) AS latest_order_date
FROM Orders
GROUP BY customer_id;
*/

-- 11. Find products in Products table that have never been sold (no entries in Sales)

/*
SELECT p.product_id
FROM Products p
LEFT JOIN Sales s ON p.product_id = s.product_id
WHERE s.product_id IS NULL;
*/

-- 12. Identify the best-selling product by quantity sold from Sales table

/*
SELECT TOP 1 product_id, SUM(quantity) AS total_qty
FROM Sales
GROUP BY product_id
ORDER BY total_qty DESC;
*/

-- 13. Get total revenue and order count per region from Orders table

/*
SELECT region, SUM(total_amount) AS total_revenue, COUNT(*) AS order_count
FROM Orders
GROUP BY region;
*/

-- 14. Count how many customers placed more than 5 orders from Orders table

/*
SELECT COUNT(*) AS customer_count
FROM (
    SELECT customer_id
    FROM Orders
    GROUP BY customer_id
    HAVING COUNT(*) > 5
) AS subquery;
*/

-- 15. Retrieve orders with a total amount above the average order value from Orders table

/*
SELECT *
FROM Orders
WHERE total_amount > (SELECT AVG(total_amount) FROM Orders);
*/

-- 16. Find all employees hired on a weekend from Employee table

/*
SELECT *
FROM Employee
WHERE DATENAME(WEEKDAY, hire_date) IN ('Saturday', 'Sunday');
*/

-- 17. Retrieve employees from Employee table with salary between 50,000 and 100,000

/*
SELECT *
FROM Employee
WHERE salary BETWEEN 50000 AND 100000;
*/

-- 18. Get monthly sales revenue and order count from Orders table

/*
SELECT FORMAT(order_date, 'yyyy-MM') AS month,
       SUM(total_amount) AS total_revenue,
       COUNT(order_id) AS order_count
FROM Orders
GROUP BY FORMAT(order_date, 'yyyy-MM');
*/

-- 19. Rank employees by salary within each department using Employee table

/*
SELECT employee_id, department_id, salary,
       RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rk
FROM Employee;
*/

-- 20. Find customers from Orders table who placed at least one order every month in 2023

/*
SELECT customer_id
FROM Orders
WHERE YEAR(order_date) = 2023
GROUP BY customer_id
HAVING COUNT(DISTINCT FORMAT(order_date, 'yyyy-MM')) = 12;
*/

-- 21. Calculate 3-day moving average of sales from Orders table

/*
SELECT order_date,
       AVG(total_amount) OVER (ORDER BY order_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg
FROM Orders;
*/

-- 22. Identify first and last order date for each customer from Orders table

/*
SELECT customer_id, MIN(order_date) AS first_order, MAX(order_date) AS last_order
FROM Orders
GROUP BY customer_id;
*/

-- 23. Calculate revenue share of each product from Sales table (percentage of total revenue)

/*
WITH TotalRevenue AS (
    SELECT SUM(quantity * price) AS total FROM Sales
)
SELECT s.product_id,
       SUM(s.quantity * s.price) AS revenue,
       SUM(s.quantity * s.price) * 100.0 / t.total AS revenue_pct
FROM Sales s
CROSS JOIN TotalRevenue t
GROUP BY s.product_id, t.total;
*/

-- 24. Find customers from Orders table who made purchases on two consecutive days

/*
WITH cte AS (
    SELECT customer_id, order_date,
           LAG(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) AS prev_order_date
    FROM Orders
)
SELECT customer_id, order_date, prev_order_date
FROM cte
WHERE DATEDIFF(DAY, prev_order_date, order_date) = 1;
*/

-- 25. Find customers from Orders table who haven't ordered in the last 6 months

/*
SELECT customer_id
FROM Orders
GROUP BY customer_id
HAVING MAX(order_date) < DATEADD(MONTH, -6, GETDATE());
*/

-- 26. Calculate cumulative revenue over time using Orders table

/*
SELECT order_date,
       SUM(total_amount) OVER (ORDER BY order_date) AS cumulative_revenue
FROM Orders;
*/

-- 27. Identify departments with highest average salary using Employee table

/*
SELECT department_id, AVG(salary) AS avg_salary
FROM Employee
GROUP BY department_id
ORDER BY avg_salary DESC;
*/

-- 28. Find customers from Orders table with order count above the average

/*
WITH customer_orders AS (
    SELECT customer_id, COUNT(*) AS order_count
    FROM Orders
    GROUP BY customer_id
)
SELECT *
FROM customer_orders
WHERE order_count > (SELECT AVG(order_count) FROM customer_orders);
*/

-- 29. Calculate revenue from first-time customers using Orders table

/*
WITH first_orders AS (
    SELECT customer_id, MIN(order_date) AS first_order_date
    FROM Orders
    GROUP BY customer_id
)
SELECT SUM(o.total_amount) AS new_revenue
FROM Orders o
JOIN first_orders f ON o.customer_id = f.customer_id
WHERE o.order_date = f.first_order_date;
*/

-- 30. Calculate percentage of employees in each department from Employee table

/*
SELECT department_id, COUNT(*) AS emp_count,
       COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Employee) AS pct
FROM Employee
GROUP BY department_id;
*/

-- 31. Retrieve maximum salary difference within each department from Employee table

/*
SELECT department_id, MAX(salary) - MIN(salary) AS salary_diff
FROM Employee
GROUP BY department_id;
*/

-- 32. Find products from Sales table that contribute to 80% of total revenue (Pareto analysis)

/*
WITH sales_cte AS (
    SELECT product_id, SUM(quantity * price) AS revenue
    FROM Sales
    GROUP BY product_id
),
total_revenue AS (
    SELECT SUM(revenue) AS total FROM sales_cte
)
SELECT s.product_id, s.revenue,
       SUM(s.revenue) OVER (ORDER BY s.revenue DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total
FROM sales_cte s, total_revenue t
WHERE SUM(s.revenue) OVER (ORDER BY s.revenue DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) <= t.total * 0.8;
*/

-- 33. Calculate average time gap between purchases for each customer from Orders table

/*
WITH cte AS (
    SELECT customer_id, order_date,
           LAG(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) AS prev_date
    FROM Orders
)
SELECT customer_id, AVG(DATEDIFF(DAY, prev_date, order_date)) AS avg_gap_days
FROM cte
WHERE prev_date IS NOT NULL
GROUP BY customer_id;
*/

-- 34. Show last order details for each customer from Orders table

/*
WITH ranked_orders AS (
    SELECT customer_id, order_id, total_amount,
           ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date DESC) AS rn
    FROM Orders
)
SELECT customer_id, order_id, total_amount
FROM ranked_orders
WHERE rn = 1;
*/

-- 35. Calculate year-over-year revenue growth from Orders table

/*
SELECT FORMAT(order_date, 'yyyy') AS year,
       SUM(total_amount) AS revenue,
       SUM(total_amount) - LAG(SUM(total_amount)) OVER (ORDER BY FORMAT(order_date, 'yyyy')) AS yoy_growth
FROM Orders
GROUP BY FORMAT(order_date, 'yyyy');
*/

-- 36. Detect high-value purchases above historical 90th percentile per customer using Orders table

/*
WITH ranked_orders AS (
    SELECT customer_id, order_id, total_amount,
           NTILE(10) OVER (PARTITION BY customer_id ORDER BY total_amount) AS decile
    FROM Orders
)
SELECT customer_id, order_id, total_amount
FROM ranked_orders
WHERE decile = 10;
*/

-- 37. Find the maximum time gap between two orders for each customer in Orders table

/*
WITH cte AS (
    SELECT customer_id, order_date,
           LAG(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) AS prev_order_date
    FROM Orders
)
SELECT customer_id, MAX(DATEDIFF(DAY, prev_order_date, order_date)) AS max_gap
FROM cte
WHERE prev_order_date IS NOT NULL
GROUP BY customer_id;
*/

-- 38. Identify customers with total revenue below the 10th percentile from Orders table

/*
WITH cte AS (
    SELECT customer_id, SUM(total_amount) AS total_revenue
    FROM Orders
    GROUP BY customer_id
),
percentile_value AS (
    SELECT PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY total_revenue) OVER () AS perc_10
    FROM cte
)
SELECT c.customer_id, c.total_revenue
FROM cte c
CROSS JOIN percentile_value p
WHERE c.total_revenue < p.perc_10;
*/

-- 39. Find the number of products sold per department

/*
SELECT d.department_id, d.department_name, COUNT(s.product_id) AS products_sold
FROM Sales s
JOIN Products p ON s.product_id = p.product_id
JOIN Department d ON p.department_id = d.department_id
GROUP BY d.department_id, d.department_name;
*/

-- 40. Identify employees who handled more than 100 orders (assuming a handler_id in Orders)

/*
SELECT e.employee_id, e.name, COUNT(o.order_id) AS orders_handled
FROM Orders o
JOIN Employee e ON o.handler_id = e.employee_id
GROUP BY e.employee_id, e.name
HAVING COUNT(o.order_id) > 100;
*/

-- 41. Calculate average salary by job title from Employee table

/*
SELECT job_title, AVG(salary) AS avg_salary
FROM Employee
GROUP BY job_title;
*/

-- 42. Retrieve all employees who joined in the last 30 days from Employee table

/*
SELECT *
FROM Employee
WHERE hire_date >= DATEADD(DAY, -30, GETDATE());
*/

-- 43. Find customers who have not placed any order in the last year

/*
SELECT c.customer_id, c.customer_name
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_date < DATEADD(YEAR, -1, GETDATE()) OR o.order_date IS NULL;
*/

-- 44. Get the total number of orders per day

/*
SELECT order_date, COUNT(order_id) AS total_orders
FROM Orders
GROUP BY order_date;
*/

-- 45. Find employees who earn more than their department average salary

/*
WITH dept_avg_salary AS (
    SELECT department_id, AVG(salary) AS avg_salary
    FROM Employee
    GROUP BY department_id
)
SELECT e.employee_id, e.salary, d.avg_salary
FROM Employee e
JOIN dept_avg_salary d ON e.department_id = d.department_id
WHERE e.salary > d.avg_salary;
*/

-- 46. Calculate the median salary across all employees (SQL Server 2012+)

/*
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY salary) OVER () AS median_salary
FROM Employee;
*/

-- 47. Get the count of distinct customers who placed orders per month

/*
SELECT FORMAT(order_date, 'yyyy-MM') AS month,
       COUNT(DISTINCT customer_id) AS unique_customers
FROM Orders
GROUP BY FORMAT(order_date, 'yyyy-MM');
*/

-- 48. Get customers and their most frequently bought product

/*
WITH customer_product_sales AS (
    SELECT o.customer_id, s.product_id, SUM(s.quantity) AS total_quantity,
           ROW_NUMBER() OVER (PARTITION BY o.customer_id ORDER BY SUM(s.quantity) DESC) AS rn
    FROM Orders o
    JOIN Sales s ON o.order_id = s.order_id
    GROUP BY o.customer_id, s.product_id
)
SELECT customer_id, product_id, total_quantity
FROM customer_product_sales
WHERE rn = 1;
*/

-- 49. Calculate total order value for each customer

/*
SELECT customer_id, SUM(total_amount) AS total_order_value
FROM Orders
GROUP BY customer_id;
*/

-- 50. Retrieve employees who earn above average salary across all employees

/*
SELECT *
FROM Employee
WHERE salary > (SELECT AVG(salary) FROM Employee);
*/
